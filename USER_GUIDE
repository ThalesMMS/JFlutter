JFlutter User Guide Supplement
==============================

Working with the fl_nodes Canvas
--------------------------------

* The automaton workspace now embeds the native fl_nodes canvas by default—no
  feature toggle or iframe handshake is required. Saving settings still
  persists grid, coordinate, and sizing options through `SettingsModel` and the
  shared preferences-backed repository.【F:lib/core/models/settings_model.dart†L3-L52】【F:lib/data/repositories/settings_repository_impl.dart†L9-L67】
* Riverpod remains the single source of truth: `AutomatonProvider` receives
  mutations from the controller for new states, drags, labels, and transitions,
  so automata stay in sync across panels, simulations, and exports.【F:lib/features/canvas/fl_nodes/fl_nodes_canvas_controller.dart†L236-L355】【F:lib/presentation/providers/automaton_provider.dart†L83-L260】
* The toolbar continues to drive the canvas, but every button now calls
  `FlNodesCanvasController` directly, bypassing the deprecated Draw2D
  JavaScript bridge.【F:lib/features/canvas/fl_nodes/fl_nodes_canvas_controller.dart†L48-L133】

### Core Actions

The following shortcuts mirror the classic Draw2D behaviour while leveraging
fl_nodes primitives:

* **Zoom In/Out** – press the toolbar magnifier buttons or use the mouse wheel
  while holding <kbd>Ctrl</kbd>/<kbd>Cmd</kbd>. Both paths call `zoomIn`/`zoomOut`
  on the controller, keeping the viewport centred around the pointer.
* **Fit to Content / Reset View** – the toolbar buttons invoke
  `fitToContent()` and `resetView()`, recomputing the camera bounds within the
  canvas without reloading the editor.【F:lib/features/canvas/fl_nodes/fl_nodes_canvas_controller.dart†L48-L133】
* **Double-tap gestures** – double tap the canvas with one finger to reset the
  viewport or with two fingers to focus the visible automaton. These shortcuts
  call the same `resetView()`/`fitToContent()` helpers exposed by the toolbar,
  so touch users receive identical behaviour without opening the actions
  sheet.【F:lib/presentation/widgets/automaton_canvas_native.dart†L612-L646】【F:lib/presentation/widgets/pda_canvas_native.dart†L515-L549】【F:lib/presentation/widgets/tm_canvas_native.dart†L330-L364】
* **Add State** – use the "Add state" toolbar button or double-click an empty
  area. The controller receives either `addStateAtCenter()` or an
  `AddNodeEvent`, then forwards the mutation to `AutomatonProvider` so the new
  state appears across the app.【F:lib/features/canvas/fl_nodes/fl_nodes_canvas_controller.dart†L236-L302】【F:lib/presentation/providers/automaton_provider.dart†L83-L166】
* **Edit transitions** – select a link to reveal the inline editor anchored to
  that edge. FSAs expose a label field, while TMs and PDAs surface tape or stack
  controls. Saving commits the change through the respective notifiers
  (`AutomatonProvider`, `TMEditorNotifier`, `PDAEditorNotifier`), keeping the
  transition list, alphabets, and metadata synchronised.【F:lib/presentation/widgets/automaton_canvas_native.dart†L227-L269】【F:lib/presentation/widgets/tm_canvas_native.dart†L207-L259】【F:lib/presentation/widgets/pda_canvas_native.dart†L274-L336】
* **Toggle initial/accepting flags** – tap the play/check icons in a state's
  header to mark it as initial or accepting. The canvases call the respective
  Riverpod notifiers (`AutomatonProvider`, `TMEditorNotifier`,
  `PDAEditorNotifier`), so the change is reflected instantly across the
  workspace.【F:lib/presentation/widgets/automaton_canvas_native.dart†L212-L308】【F:lib/presentation/widgets/tm_canvas_native.dart†L170-L306】【F:lib/presentation/widgets/pda_canvas_native.dart†L240-L360】
* **Highlight Playback** – running a simulation pushes highlight payloads into
  the controller via the `FlNodesHighlightController` interface. The canvas
  updates instantly and clears highlights when the simulator stops.【F:lib/core/services/simulation_highlight_service.dart†L6-L74】【F:lib/features/canvas/fl_nodes/fl_nodes_canvas_controller.dart†L36-L45】

Highlight & Simulation Flow
---------------------------

* `SimulationHighlightService` derives the visited states/transitions for each
  simulator step and feeds them to the controller notifier through the
  `FlNodesHighlightController` contract. No additional wiring is required when
  writing new simulations—just publish highlight changes to the service.
* The canvas paints visited states immediately because the notifier is observed
  inside `AutomatonCanvas`. There is no longer a "Canvas not connected" status
  gate—if highlights are missing, verify the notifier listener is attached when
  the widget initialises.【F:lib/presentation/widgets/automaton_canvas_native.dart†L49-L110】

Manual Verification Checklist
-----------------------------

1. Open the automaton workspace and confirm existing automata appear in the
   Flutter canvas.
2. Drag states, rename them, and draw transitions—each change should instantly
   propagate to the side panels driven by `AutomatonProvider`.
3. Trigger the zoom, fit, reset, and add-state actions (via toolbar buttons or
   gestures) and confirm the controller updates the viewport accordingly.【F:lib/features/canvas/fl_nodes/fl_nodes_canvas_controller.dart†L48-L133】
4. Run a simulation and ensure highlights move with the active step while the
   notifier updates the overlay state.【F:lib/features/canvas/fl_nodes/fl_nodes_canvas_controller.dart†L36-L45】
5. Execute `flutter analyze` (and `flutter test` when suites exist) before
   requesting review.

Troubleshooting
---------------

* **Canvas not updating**: check that `_isSynchronizing` isn't stuck to `true`
  (e.g., due to an exception while rebuilding nodes). If so, call
  `synchronize()` again after fixing the underlying data issue.【F:lib/features/canvas/fl_nodes/fl_nodes_canvas_controller.dart†L96-L234】
* **Transition edits not sticking**: use the inline editor's **Save** button
  (or <kbd>Enter</kbd> inside the field) to submit changes. Selecting another
  edge or pressing **Cancel** dismisses the overlay without persisting
  updates.【F:lib/presentation/widgets/automaton_canvas_native.dart†L247-L265】【F:lib/presentation/widgets/tm_canvas_native.dart†L233-L257】【F:lib/presentation/widgets/pda_canvas_native.dart†L309-L333】
* **Highlights not clearing**: verify the `SimulationHighlightService` channel
  is registered and that `clear()` is called after simulations complete.【F:lib/core/services/simulation_highlight_service.dart†L6-L74】
