JFlutter User Guide Supplement
==============================

_Nota: migração em andamento._

Working with the GraphView Canvas
---------------------------------

* The automaton workspace now embeds the GraphView-based canvas by default, wiring highlight playback and toolbar state directly to the Flutter widget tree—no feature toggle or iframe bridge is required.【F:lib/presentation/widgets/automaton_graphview_canvas.dart†L23-L116】
* Riverpod remains the single source of truth: `GraphViewCanvasController` converts provider state into GraphView snapshots and replays user interactions (creation, drag, rename, deletion) back into the notifiers so the entire UI stays synchronised.【F:lib/features/canvas/graphview/graphview_canvas_controller.dart†L14-L156】【F:lib/presentation/providers/automaton_provider.dart†L25-L219】
* The GraphView toolbar exposes viewport controls, undo/redo, and optional drawing tools for both desktop and mobile layouts, keeping the canvas commands consistent across platforms.【F:lib/presentation/widgets/graphview_canvas_toolbar.dart†L6-L138】
* Touch-first layouts present the same actions plus simulator shortcuts inside `MobileAutomatonControls`, a bottom tray that preserves screen real estate while remaining thumb-accessible.【F:lib/presentation/widgets/mobile_automaton_controls.dart†L1-L132】

### Core Actions

* **Add State** – Enable the Add State tool (or trigger the callback) and tap the canvas to drop a node at the tapped world coordinates. The controller assigns unique IDs/labels and marks the first state as initial automatically.【F:lib/presentation/widgets/automaton_graphview_canvas.dart†L254-L303】【F:lib/features/canvas/graphview/graphview_canvas_controller.dart†L60-L119】
* **Move State** – Drag a node to reposition it; the controller normalises the delta according to the current zoom level before persisting the new coordinates via `AutomatonProvider`.【F:lib/presentation/widgets/automaton_graphview_canvas.dart†L304-L332】【F:lib/features/canvas/graphview/graphview_canvas_controller.dart†L121-L150】
* **Add or Edit Transition** – Select a source and destination node while the Transition tool is active to open the inline editor. Saving updates the edge snapshot and forwards the mutation to the provider, ensuring tape/stack metadata stays aligned for advanced automata.【F:lib/presentation/widgets/automaton_graphview_canvas.dart†L333-L494】【F:lib/features/canvas/graphview/graphview_canvas_controller.dart†L152-L214】
* **Viewport Controls** – Use the toolbar (or keyboard shortcuts) to zoom, fit to content, reset the view, and traverse undo/redo history; every command proxies to the shared controller so desktop and mobile gestures stay in sync.【F:lib/presentation/widgets/graphview_canvas_toolbar.dart†L33-L138】【F:lib/features/canvas/graphview/base_graphview_canvas_controller.dart†L17-L220】
* **Highlight Playback** – Running a simulation pushes highlight payloads into `GraphViewSimulationHighlightChannel`, which drives the canvas highlight notifier and clears it automatically after playback ends.【F:lib/presentation/widgets/automaton_graphview_canvas.dart†L41-L84】【F:lib/features/canvas/graphview/graphview_highlight_channel.dart†L5-L19】【F:lib/core/services/simulation_highlight_service.dart†L8-L101】

Manual Verification Checklist
-----------------------------

1. Open the automaton workspace and confirm existing automatons render inside the GraphView canvas with overlays active.【F:lib/presentation/widgets/automaton_graphview_canvas.dart†L187-L236】
2. Add, drag, rename, and delete states/transitions; every change should propagate to the inspector panels maintained by `AutomatonProvider` and related notifiers.【F:lib/features/canvas/graphview/graphview_canvas_controller.dart†L60-L214】【F:lib/presentation/providers/automaton_provider.dart†L25-L219】
3. Trigger zoom, fit, reset, undo, redo, and add-state actions via the toolbar and gesture targets, confirming the controller updates the viewport accordingly.【F:lib/presentation/widgets/graphview_canvas_toolbar.dart†L33-L138】【F:lib/features/canvas/graphview/base_graphview_canvas_controller.dart†L17-L220】
4. Run a simulation and ensure highlights follow the active step while clearing when playback stops.【F:lib/features/canvas/graphview/graphview_highlight_channel.dart†L5-L19】【F:lib/core/services/simulation_highlight_service.dart†L57-L101】
5. Execute `flutter analyze` (and `flutter test` when suites exist) before requesting review.

Troubleshooting
---------------

* **Canvas not updating** – Verify the controller is still attached and that `synchronize` is invoked after mutating automata outside the canvas scope; stale listeners or an outdated snapshot can prevent GraphView from rebuilding.【F:lib/features/canvas/graphview/base_graphview_canvas_controller.dart†L57-L166】
* **Transition edits not sticking** – Ensure the inline overlay is saved; dismissing it cancels the mutation. Confirm the mapper rebuilds the automaton snapshot so provider state matches the canvas representation.【F:lib/presentation/widgets/automaton_graphview_canvas.dart†L333-L494】【F:lib/features/canvas/graphview/graphview_automaton_mapper.dart†L7-L130】
* **Highlights not clearing** – Check that `SimulationHighlightService` is pointing to the GraphView channel and that `clear()` is invoked when simulators finish processing.【F:lib/presentation/widgets/automaton_graphview_canvas.dart†L41-L84】【F:lib/core/services/simulation_highlight_service.dart†L57-L101】
