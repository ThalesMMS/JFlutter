{
  "openapi": "3.0.0",
  "info": {
    "title": "JFlutter Automaton Service API",
    "version": "1.0.0",
    "description": "Local service contracts for automaton operations in JFlutter mobile app"
  },
  "servers": [
    {
      "url": "local://automaton-service",
      "description": "Local Flutter service"
    }
  ],
  "paths": {
    "/automata": {
      "post": {
        "summary": "Create new automaton",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAutomatonRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Automaton created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automaton"
                }
              }
            }
          },
          "400": {
            "description": "Invalid automaton data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all automata",
        "responses": {
          "200": {
            "description": "List of automata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Automaton"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/automata/{id}": {
      "get": {
        "summary": "Get automaton by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Automaton found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automaton"
                }
              }
            }
          },
          "404": {
            "description": "Automaton not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update automaton",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Automaton"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Automaton updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automaton"
                }
              }
            }
          },
          "404": {
            "description": "Automaton not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete automaton",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Automaton deleted successfully"
          },
          "404": {
            "description": "Automaton not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/automata/{id}/simulate": {
      "post": {
        "summary": "Simulate automaton with input string",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Simulation completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulationResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input string",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/automata/{id}/convert": {
      "post": {
        "summary": "Convert automaton (NFA to DFA, etc.)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConversionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Conversion completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automaton"
                }
              }
            }
          },
          "400": {
            "description": "Invalid conversion request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Automaton": {
        "type": "object",
        "required": ["id", "name", "type", "states", "transitions", "alphabet"],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["FSA", "PDA", "TM"]
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/State"
            }
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          },
          "alphabet": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "initialState": {
            "$ref": "#/components/schemas/State"
          },
          "acceptingStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/State"
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "bounds": {
            "$ref": "#/components/schemas/Rectangle"
          },
          "zoomLevel": {
            "type": "number",
            "minimum": 0.5,
            "maximum": 3.0
          },
          "panOffset": {
            "$ref": "#/components/schemas/Point"
          }
        }
      },
      "State": {
        "type": "object",
        "required": ["id", "position"],
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "position": {
            "$ref": "#/components/schemas/Point"
          },
          "isInitial": {
            "type": "boolean"
          },
          "isAccepting": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": ["normal", "trap", "accepting"]
          }
        }
      },
      "Transition": {
        "type": "object",
        "required": ["id", "fromState", "toState", "label"],
        "properties": {
          "id": {
            "type": "string"
          },
          "fromState": {
            "type": "string"
          },
          "toState": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "controlPoint": {
            "$ref": "#/components/schemas/Point"
          },
          "type": {
            "type": "string",
            "enum": ["deterministic", "nondeterministic"]
          }
        }
      },
      "Point": {
        "type": "object",
        "required": ["x", "y"],
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          }
        }
      },
      "Rectangle": {
        "type": "object",
        "required": ["x", "y", "width", "height"],
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          }
        }
      },
      "CreateAutomatonRequest": {
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["FSA", "PDA", "TM"]
          }
        }
      },
      "SimulationRequest": {
        "type": "object",
        "required": ["inputString"],
        "properties": {
          "inputString": {
            "type": "string"
          },
          "stepByStep": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "SimulationResult": {
        "type": "object",
        "required": ["inputString", "accepted", "steps"],
        "properties": {
          "inputString": {
            "type": "string"
          },
          "accepted": {
            "type": "boolean"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimulationStep"
            }
          },
          "errorMessage": {
            "type": "string"
          },
          "executionTime": {
            "type": "number"
          }
        }
      },
      "SimulationStep": {
        "type": "object",
        "required": ["currentState", "remainingInput", "stepNumber"],
        "properties": {
          "currentState": {
            "type": "string"
          },
          "remainingInput": {
            "type": "string"
          },
          "stackContents": {
            "type": "string"
          },
          "tapeContents": {
            "type": "string"
          },
          "usedTransition": {
            "type": "string"
          },
          "stepNumber": {
            "type": "integer"
          }
        }
      },
      "ConversionRequest": {
        "type": "object",
        "required": ["conversionType"],
        "properties": {
          "conversionType": {
            "type": "string",
            "enum": ["NFA_TO_DFA", "MINIMIZE_DFA", "REGEX_TO_NFA"]
          },
          "parameters": {
            "type": "object"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["error", "message"],
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object"
          }
        }
      }
    }
  }
}
