# JFlutter Mobile-Optimized Core Features - Cursor IDE Context

## Current Feature: Mobile-Optimized JFlutter Core Features
**Branch**: 002-title-mobile-optimized  
**Status**: Planning Complete  
**Last Updated**: 2024-12-19

## Technical Stack
- **Language**: Dart 3.0+, Flutter 3.16+
- **State Management**: Provider pattern with ChangeNotifier
- **Canvas Rendering**: CustomPainter with Canvas API
- **Local Storage**: SharedPreferences
- **Testing**: Flutter Test, Integration Test, Widget Test
- **Target Platform**: Mobile (iOS 12+, Android API 21+)

## Core Features
1. **Finite Automaton** - State-based automata with transitions
2. **Pushdown Automaton** - Stack-based automata with push/pop operations
3. **Turing Machine** - Tape-based automata with read/write/move operations
4. **Grammar** - Context-free grammar with productions
5. **Regular Expression** - Pattern matching with test strings
6. **Pumping Lemma** - Formal language proof exercises

## Architecture Decisions
- **UI Pattern**: Bottom navigation with expandable drawer menus
- **Rendering**: CustomPainter for automata visualization
- **Touch Handling**: GestureDetector with custom hit testing
- **Responsive Design**: MediaQuery-based with breakpoints
- **Data Model**: Entity-based with JSON serialization

## Key Files
- **Models**: `/lib/core/models/` - Data structures for automata, states, transitions
- **Services**: `/lib/core/services/` - Business logic and API contracts
- **UI**: `/lib/presentation/` - Mobile-optimized interface components
- **Contracts**: `/specs/002-title-mobile-optimized/contracts/` - API specifications

## Recent Changes
- **2024-12-19**: Created mobile-optimized specification and implementation plan
- **2024-12-19**: Defined data model with 12 core entities
- **2024-12-19**: Generated API contracts and contract tests
- **2024-12-19**: Created comprehensive quickstart guide

## Development Guidelines
- Follow mobile-first design principles
- Maintain algorithmic consistency with original JFLAP Java implementation
- Use expandable menus to preserve screen space
- Implement compact toolbars that don't obstruct workspace
- Ensure all touch targets are at least 44pt for accessibility
- Test on both iOS and Android devices
- Optimize for 60fps performance on mid-range devices

## Removed Features
- Mealy Machine (not needed for core functionality)
- Moore Machine (not needed for core functionality)  
- Multi-Tape Turing Machine (simplified to single-tape)
- L-System (not part of core automata theory)

## Next Steps
- Execute `/tasks` command to generate implementation tasks
- Begin TDD implementation following contract tests
- Focus on mobile UI optimization and touch interactions